#!/bin/bash
echo "Full Environment Settings:"
env
# insert settings for mirrors/repository managers into settings.xml if supplied
function configure_mirrors() {
  if [ -n "$MAVEN_MIRROR_URL" ]; then
    xml="    <mirror>\
       <id>mirror.default</id>\
       <url>$MAVEN_MIRROR_URL</url>\
       <mirrorOf>external:*</mirrorOf>\
     </mirror>"
    sed -i "s|<!-- ### configured mirrors ### -->|$xml|" $HOME/.m2/settings.xml
  fi
}
#Start PG service in the background and continue once the last expected logline appears
export PGPASSWORD=postgres
echo "Creating DB $POSTGRESQL_DATABASE for $POSTGRESQL_USER"
$(dirname "$0")/start_pg_and_wait.sh
LOCAL_SOURCE_DIR=$HOME/current-s2i-build
mkdir -p $LOCAL_SOURCE_DIR
#Start Maven in the background and exit once the logline immediately following DB creation appears
if [ -d /opt/s2i/destination/src/maven ]; then
    cp -Rf /opt/s2i/destination/src/maven/. $LOCAL_SOURCE_DIR
else
    cp -Rf /opt/s2i/destination/src/. $LOCAL_SOURCE_DIR
fi
cd $LOCAL_SOURCE_DIR
pwd
ls -al
configure_mirrors
if [ -d  $LOCAL_SOURCE_DIR/src/main/db/tar ] && ! [ -d  $LOCAL_SOURCE_DIR/src/main/webapp/protected/databaseBackups/develop/portDataSource ]; then
    ant PG-db-full-update-tar -Dpostgres.bin.path=/opt/rh/rh-postgresql95/root/usr/bin/
else
    sed -i  '/\<webApp>/a <webInfIncludeJarPattern>nothing</webInfIncludeJarPattern>' pom.xml

    mvn_command="mvn jetty:run --settings $HOME/.m2/settings.xml \
    --batch-mode \
    --no-snapshot-updates \
    $MAVEN_ARGS_APPEND \
    -Dmaven.repo.local=$HOME/.m2/repository \
    -Dprofile.database.username=${POSTGRESQL_USER} \
    -Dprofile.database.password=${POSTGRESQL_PASSWORD} \
    -Dprofile.database.url.portdb=jdbc:postgresql://localhost:5432/${POSTGRESQL_DATABASE} \
    -Dprofile.database.url.servdb=jdbc:postgresql://localhost:5432/${POSTGRESQL_DATABASE2} \
    -Dprofile.database.driverClassName=org.postgresql.Driver \
    -Dprofile.database.hostname=localhost \
    -Dprofile.database.port=5432 \
    -Dprofile.resources.path=./src/main/webapp/resources \
    -Dprofile.resources.path.protected=./src/main/webapp/protected \
    -Dprofile.index.path=./target/temp/indexdir \
    -Dprofile.log.file.prefix=./target/build_log \
    -DjettyScannedJars=none \
    "
    echo "executing $mvn_command "
    log=db_creation.log
    $mvn_command 2>&1 | tee "$log" &
    jetty_pid=$!
    for i in {1..360}
    do
        sleep 5
        if fgrep --quiet "BUILD FAILURE" "$log"; then
          exit 1
        fi
        if fgrep --quiet "Started Jetty Server" "$log"
        then
            if [[ -d "src/main/webapp/protected/databaseBackups/develop/portDataSource" ]]; then
              echo "An Entando backup was detected. Please verify that your data has been restored."
            fi
            echo "Jetty started and database created"
            kill $jetty_pid
            cp $HOME/data $HOME/data_template -rf
            rm $HOME/data_template/userdata/postmaster.pid
            /usr/libexec/fix-permissions $HOME/data_template
            /usr/libexec/fix-permissions $HOME/openshift-custom-postgresql.conf
            /usr/libexec/fix-permissions $HOME/passwd
            rm /var/run/postgresql/.s.PGSQL*
            rm "$log"
            rm /var/lib/pgsql/pg_startup.log
            rm /tmp/.s.PGSQL*
            rm * -rf
            exit 0
        fi
    done
    exit 1
fi