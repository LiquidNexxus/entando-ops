#!/bin/bash
echo "Full Environment Settings:"
# insert settings for mirrors/repository managers into settings.xml if supplied
function configure_mirrors() {
  if [ -n "$MAVEN_MIRROR_URL" ]; then
    xml="    <mirror>\
       <id>mirror.default</id>\
       <url>$MAVEN_MIRROR_URL</url>\
       <mirrorOf>external:*</mirrorOf>\
     </mirror>"
    sed -i "s|<!-- ### configured mirrors ### -->|$xml|" $HOME/.m2/settings.xml
  fi
}
LOCAL_SOURCE_DIR=/tmp/current-s2i-build
mkdir -p $LOCAL_SOURCE_DIR
#Start Maven in the background and exit once the logline immediately following DB creation appears
if [ -d /opt/s2i/destination/src/maven ]; then
    cp -Rf /opt/s2i/destination/src/maven/. $LOCAL_SOURCE_DIR
else
    cp -Rf /opt/s2i/destination/src/. $LOCAL_SOURCE_DIR
fi
cd $LOCAL_SOURCE_DIR
configure_mirrors
$(dirname ${BASH_SOURCE[0]})/start-pg-and-wait.sh
#Did the developer package a PostgreSQL TAR backup and NOT a SQL file based backup (which takes precedence)?
if [ -d  $LOCAL_SOURCE_DIR/src/main/db/tar ] && ! [ -d  $LOCAL_SOURCE_DIR/src/main/webapp/protected/databaseBackups/develop/portDataSource ]; then
#Restore from binary TAR backup
    ant PG-db-full-update-tar -Dpostgres.bin.path=/opt/rh/rh-postgresql95/root/usr/bin/
else
#Build the empty database and let 'mvn jetty:run' take care of any SQL file backups where they may exist.
    $(dirname ${BASH_SOURCE[0]})/init-postgresql-db.sh
fi
if [ $? -eq 0 ]; then
    exit 0
else
    exit 1
fi
